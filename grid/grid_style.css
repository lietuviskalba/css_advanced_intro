/*
>> Documentation for CSS
    [] CSS grid
>> Page: 16
>> Link to doc: https://docs.google.com/document/d/1NoFPu4Z9_kNf3hDG59YhuLVXH1JKc71kgO7CtFawtDw/edit?skip_itp2_check=true#
*/
/* Set up entire group of picture properties */
.container {
    margin: 30px auto;
    padding: 20px 10px;
    background-color: #135663;
    border: 3px solid #256A77;
    border-radius: 20px;
    width: 99%;
    box-sizing: border-box;


    /* To use CSS grid, set the display to grid */
    display: grid;
    /* Gap creator between elements */
    gap: 20px;

    /* How many columns to use. grid-template-columns: 300px (col_num_1), 200px (col_num_2), ... */
    /* grid-template-columns: 300px 300px;  */
    /* grid-template-columns: 33% 33% 33%; */
    /* grid-template-columns: auto 2fr 1fr; fr is fraction (best way to use it with grids) */
    /* grid-template-columns: repeat(3, 1fr); same as 1fr 1fr 1fr */
    /* grid-template-columns: auto; fill in any available space we have*/
    /* grid-template-columns: auto 2fr 1fr; fr are fractions scale better then px ir % */

    /* Cream de le crop of how to create responsive UI */
    /* The repeat() CSS function allows columns or rows with a recurring pattern to be written in a more compact form*/
    /* The minmax() CSS function defines a size range greater than or equal to min and less than or equal to max.*/
    grid-template-columns: repeat(auto-fill, minmax(150px, 250px));

    /* Just like for columns this is for rows */
    grid-template-rows: 1fr;

    /* Justify items. Utilities for controlling how grid items are aligned along their inline axis */
    /* TL;DR This is for aligning  items vertically */
    /* https://tailwindcss.com/docs/justify-items */
    /* Use the dev tool in web browser to see CSS grid lines visually */
    justify-items: start;

    /* Align items. Utilities for controlling how flex and grid items are positioned along a container's cross axis. */
    /* TL;DR This is for aligning  items horizontally/in center */
    /* https://tailwindcss.com/docs/align-items */
    /* Use the dev tool in web browser to see CSS grid lines visually */
    align-items: center;

}

.container > img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}


.square {
    /* Grid Column Start / End */
    /* Utilities for controlling how elements are sized and placed across grid columns */
    /* https://tailwindcss.com/docs/grid-column */

    /* All can be written like this: */
    /* grid-column-start: 1;*/
    /* grid-column-end: 3;  */
    /* Or the more compact way  grid-column: start_number/end_number; */
    /* Or an even a more professional way use -1 to go to the end of the viewport grid-column: 1/-1; */
    /* Alternative is to use grid-column: span number; WHICH is span across a number of grids */
    grid-column: span 2;
    grid-row: 1/3;
}

/* Set up individual image properties */
.picture {
    /* Changes the mouse cursor when hover over item */
    cursor: pointer;
    width: 300px;
    height: 250;
    border: 5px solid #033F4A;
    border-radius: 10px;
    /* Makes the .picture:hover (element below) have a delay when the effect is triggered */
    transition: all 0.3s linear;
}

.picture:hover {
    /* offset-x | offset-y | blur-radius | spread-radius | color */
    box-shadow: 0px 0px 20px 10px #659da8c8;
    border: 5px solid #3D7F8B;
    border-radius: 100px;
}